<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="150" onload="init(evt)" viewBox="0 0 1200 150" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="150" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="133.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="133.00"> </text><svg id="frames" x="10" width="1180" total_samples="79917722500"><g><title>ThreadId(10) (3,678,015,600 samples, 4.60%)</title><rect x="0.0000%" y="85" width="4.6023%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3678015600"/><text x="0.2500%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (64,434,100 samples, 0.08%)</title><rect x="4.5216%" y="69" width="0.0806%" height="15" fill="rgb(217,0,24)" fg:x="3613581500" fg:w="64434100"/><text x="4.7716%" y="79.50"></text></g><g><title>ThreadId(11) (3,678,462,000 samples, 4.60%)</title><rect x="4.6023%" y="85" width="4.6028%" height="15" fill="rgb(221,193,54)" fg:x="3678015600" fg:w="3678462000"/><text x="4.8523%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (64,832,000 samples, 0.08%)</title><rect x="9.1239%" y="69" width="0.0811%" height="15" fill="rgb(248,212,6)" fg:x="7291645600" fg:w="64832000"/><text x="9.3739%" y="79.50"></text></g><g><title>ThreadId(12) (3,677,815,700 samples, 4.60%)</title><rect x="9.2051%" y="85" width="4.6020%" height="15" fill="rgb(208,68,35)" fg:x="7356477600" fg:w="3677815700"/><text x="9.4551%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (61,212,400 samples, 0.08%)</title><rect x="13.7305%" y="69" width="0.0766%" height="15" fill="rgb(232,128,0)" fg:x="10973080900" fg:w="61212400"/><text x="13.9805%" y="79.50"></text></g><g><title>ThreadId(13) (3,676,231,600 samples, 4.60%)</title><rect x="13.8071%" y="85" width="4.6000%" height="15" fill="rgb(207,160,47)" fg:x="11034293300" fg:w="3676231600"/><text x="14.0571%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (69,242,700 samples, 0.09%)</title><rect x="18.3204%" y="69" width="0.0866%" height="15" fill="rgb(228,23,34)" fg:x="14641282200" fg:w="69242700"/><text x="18.5704%" y="79.50"></text></g><g><title>ThreadId(14) (3,672,091,800 samples, 4.59%)</title><rect x="18.4071%" y="85" width="4.5948%" height="15" fill="rgb(218,30,26)" fg:x="14710524900" fg:w="3672091800"/><text x="18.6571%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (59,754,100 samples, 0.07%)</title><rect x="22.9272%" y="69" width="0.0748%" height="15" fill="rgb(220,122,19)" fg:x="18322862600" fg:w="59754100"/><text x="23.1772%" y="79.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (31,152,900 samples, 0.04%)</title><rect x="24.1922%" y="53" width="0.0390%" height="15" fill="rgb(250,228,42)" fg:x="19333870700" fg:w="31152900"/><text x="24.4422%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (29,483,200 samples, 0.04%)</title><rect x="24.1943%" y="37" width="0.0369%" height="15" fill="rgb(240,193,28)" fg:x="19335540400" fg:w="29483200"/><text x="24.4443%" y="47.50"></text></g><g><title> AutoHotKey::image_processing::screenshot:src\image_processing.rs:16 (10,313,600 samples, 0.01%)</title><rect x="24.2319%" y="37" width="0.0129%" height="15" fill="rgb(216,20,37)" fg:x="19365583000" fg:w="10313600"/><text x="24.4819%" y="47.50"></text></g><g><title>ThreadId(15) (993,771,700 samples, 1.24%)</title><rect x="23.0019%" y="85" width="1.2435%" height="15" fill="rgb(206,188,39)" fg:x="18382616700" fg:w="993771700"/><text x="23.2519%" y="95.50"></text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (42,567,600 samples, 0.05%)</title><rect x="24.1922%" y="69" width="0.0533%" height="15" fill="rgb(217,207,13)" fg:x="19333820800" fg:w="42567600"/><text x="24.4422%" y="79.50"></text></g><g><title> AutoHotKey::image_processing::update_screenshot:src\image_processing.rs:291 (11,364,800 samples, 0.01%)</title><rect x="24.2312%" y="53" width="0.0142%" height="15" fill="rgb(231,73,38)" fg:x="19365023600" fg:w="11364800"/><text x="24.4812%" y="63.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (40,258,500 samples, 0.05%)</title><rect x="25.6875%" y="53" width="0.0504%" height="15" fill="rgb(225,20,46)" fg:x="20528857400" fg:w="40258500"/><text x="25.9375%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (38,378,000 samples, 0.05%)</title><rect x="25.6898%" y="37" width="0.0480%" height="15" fill="rgb(210,31,41)" fg:x="20530737900" fg:w="38378000"/><text x="25.9398%" y="47.50"></text></g><g><title> AutoHotKey::image_processing::screenshot:src\image_processing.rs:16 (9,511,800 samples, 0.01%)</title><rect x="25.7386%" y="37" width="0.0119%" height="15" fill="rgb(221,200,47)" fg:x="20569691700" fg:w="9511800"/><text x="25.9886%" y="47.50"></text></g><g><title>ThreadId(16) (1,203,226,200 samples, 1.51%)</title><rect x="24.2454%" y="85" width="1.5056%" height="15" fill="rgb(226,26,5)" fg:x="19376388400" fg:w="1203226200"/><text x="24.4954%" y="95.50"></text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (50,807,500 samples, 0.06%)</title><rect x="25.6874%" y="69" width="0.0636%" height="15" fill="rgb(249,33,26)" fg:x="20528807100" fg:w="50807500"/><text x="25.9374%" y="79.50"></text></g><g><title> AutoHotKey::image_processing::update_screenshot:src\image_processing.rs:291 (10,498,700 samples, 0.01%)</title><rect x="25.7379%" y="53" width="0.0131%" height="15" fill="rgb(235,183,28)" fg:x="20569115900" fg:w="10498700"/><text x="25.9879%" y="63.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (35,857,400 samples, 0.04%)</title><rect x="27.4382%" y="53" width="0.0449%" height="15" fill="rgb(221,5,38)" fg:x="21927946300" fg:w="35857400"/><text x="27.6882%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (33,651,300 samples, 0.04%)</title><rect x="27.4409%" y="37" width="0.0421%" height="15" fill="rgb(247,18,42)" fg:x="21930152400" fg:w="33651300"/><text x="27.6909%" y="47.50"></text></g><g><title>ThreadId(17) (1,389,024,400 samples, 1.74%)</title><rect x="25.7510%" y="85" width="1.7381%" height="15" fill="rgb(241,131,45)" fg:x="20579614600" fg:w="1389024400"/><text x="26.0010%" y="95.50"></text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (40,746,200 samples, 0.05%)</title><rect x="27.4381%" y="69" width="0.0510%" height="15" fill="rgb(249,31,29)" fg:x="21927892800" fg:w="40746200"/><text x="27.6881%" y="79.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (34,591,000 samples, 0.04%)</title><rect x="29.4150%" y="53" width="0.0433%" height="15" fill="rgb(225,111,53)" fg:x="23507817000" fg:w="34591000"/><text x="29.6650%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (32,640,300 samples, 0.04%)</title><rect x="29.4175%" y="37" width="0.0408%" height="15" fill="rgb(238,160,17)" fg:x="23509767700" fg:w="32640300"/><text x="29.6675%" y="47.50"></text></g><g><title> AutoHotKey::image_processing::screenshot:src\image_processing.rs:16 (13,632,500 samples, 0.02%)</title><rect x="29.4587%" y="37" width="0.0171%" height="15" fill="rgb(214,148,48)" fg:x="23542735000" fg:w="13632500"/><text x="29.7087%" y="47.50"></text></g><g><title>ThreadId(18) (1,588,104,600 samples, 1.99%)</title><rect x="27.4891%" y="85" width="1.9872%" height="15" fill="rgb(232,36,49)" fg:x="21968639000" fg:w="1588104600"/><text x="27.7391%" y="95.50">T..</text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (48,959,900 samples, 0.06%)</title><rect x="29.4150%" y="69" width="0.0613%" height="15" fill="rgb(209,103,24)" fg:x="23507783700" fg:w="48959900"/><text x="29.6650%" y="79.50"></text></g><g><title> AutoHotKey::image_processing::update_screenshot:src\image_processing.rs:291 (14,335,600 samples, 0.02%)</title><rect x="29.4583%" y="53" width="0.0179%" height="15" fill="rgb(229,88,8)" fg:x="23542408000" fg:w="14335600"/><text x="29.7083%" y="63.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (29,008,400 samples, 0.04%)</title><rect x="31.6304%" y="53" width="0.0363%" height="15" fill="rgb(213,181,19)" fg:x="25278334400" fg:w="29008400"/><text x="31.8804%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (27,370,200 samples, 0.03%)</title><rect x="31.6325%" y="37" width="0.0342%" height="15" fill="rgb(254,191,54)" fg:x="25279972600" fg:w="27370200"/><text x="31.8825%" y="47.50"></text></g><g><title> AutoHotKey::image_processing::screenshot:src\image_processing.rs:16 (10,468,000 samples, 0.01%)</title><rect x="31.6674%" y="37" width="0.0131%" height="15" fill="rgb(241,83,37)" fg:x="25307902500" fg:w="10468000"/><text x="31.9174%" y="47.50"></text></g><g><title>ThreadId(19) (1,762,074,800 samples, 2.20%)</title><rect x="29.4762%" y="85" width="2.2049%" height="15" fill="rgb(233,36,39)" fg:x="23556743600" fg:w="1762074800"/><text x="29.7262%" y="95.50">T..</text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (40,553,300 samples, 0.05%)</title><rect x="31.6304%" y="69" width="0.0507%" height="15" fill="rgb(226,3,54)" fg:x="25278265100" fg:w="40553300"/><text x="31.8804%" y="79.50"></text></g><g><title> AutoHotKey::image_processing::update_screenshot:src\image_processing.rs:291 (11,475,600 samples, 0.01%)</title><rect x="31.6667%" y="53" width="0.0144%" height="15" fill="rgb(245,192,40)" fg:x="25307342800" fg:w="11475600"/><text x="31.9167%" y="63.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (40,995,700 samples, 0.05%)</title><rect x="32.5563%" y="53" width="0.0513%" height="15" fill="rgb(238,167,29)" fg:x="26018284100" fg:w="40995700"/><text x="32.8063%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (29,713,200 samples, 0.04%)</title><rect x="32.5705%" y="37" width="0.0372%" height="15" fill="rgb(232,182,51)" fg:x="26029566600" fg:w="29713200"/><text x="32.8205%" y="47.50"></text></g><g><title>ThreadId(2) (744,457,700 samples, 0.93%)</title><rect x="31.6811%" y="85" width="0.9315%" height="15" fill="rgb(231,60,39)" fg:x="25318818400" fg:w="744457700"/><text x="31.9311%" y="95.50"></text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (45,149,700 samples, 0.06%)</title><rect x="32.5561%" y="69" width="0.0565%" height="15" fill="rgb(208,69,12)" fg:x="26018126400" fg:w="45149700"/><text x="32.8061%" y="79.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (27,787,900 samples, 0.03%)</title><rect x="35.0106%" y="53" width="0.0348%" height="15" fill="rgb(235,93,37)" fg:x="27979673200" fg:w="27787900"/><text x="35.2606%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (25,948,300 samples, 0.03%)</title><rect x="35.0129%" y="37" width="0.0325%" height="15" fill="rgb(213,116,39)" fg:x="27981512800" fg:w="25948300"/><text x="35.2629%" y="47.50"></text></g><g><title>ThreadId(20) (1,950,352,400 samples, 2.44%)</title><rect x="32.6126%" y="85" width="2.4405%" height="15" fill="rgb(222,207,29)" fg:x="26063276100" fg:w="1950352400"/><text x="32.8626%" y="95.50">Th..</text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (34,014,900 samples, 0.04%)</title><rect x="35.0105%" y="69" width="0.0426%" height="15" fill="rgb(206,96,30)" fg:x="27979613600" fg:w="34014900"/><text x="35.2605%" y="79.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (27,271,600 samples, 0.03%)</title><rect x="37.6987%" y="53" width="0.0341%" height="15" fill="rgb(218,138,4)" fg:x="30127947600" fg:w="27271600"/><text x="37.9487%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (25,254,700 samples, 0.03%)</title><rect x="37.7012%" y="37" width="0.0316%" height="15" fill="rgb(250,191,14)" fg:x="30129964500" fg:w="25254700"/><text x="37.9512%" y="47.50"></text></g><g><title>ThreadId(21) (2,144,791,900 samples, 2.68%)</title><rect x="35.0531%" y="85" width="2.6838%" height="15" fill="rgb(239,60,40)" fg:x="28013628500" fg:w="2144791900"/><text x="35.3031%" y="95.50">Th..</text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (30,538,200 samples, 0.04%)</title><rect x="37.6986%" y="69" width="0.0382%" height="15" fill="rgb(206,27,48)" fg:x="30127882200" fg:w="30538200"/><text x="37.9486%" y="79.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (33,932,700 samples, 0.04%)</title><rect x="40.6227%" y="53" width="0.0425%" height="15" fill="rgb(225,35,8)" fg:x="32464718300" fg:w="33932700"/><text x="40.8727%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (32,186,300 samples, 0.04%)</title><rect x="40.6249%" y="37" width="0.0403%" height="15" fill="rgb(250,213,24)" fg:x="32466464700" fg:w="32186300"/><text x="40.8749%" y="47.50"></text></g><g><title>ThreadId(22) (2,345,845,000 samples, 2.94%)</title><rect x="37.7368%" y="85" width="2.9353%" height="15" fill="rgb(247,123,22)" fg:x="30158420400" fg:w="2345845000"/><text x="37.9868%" y="95.50">Th..</text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (39,575,600 samples, 0.05%)</title><rect x="40.6226%" y="69" width="0.0495%" height="15" fill="rgb(231,138,38)" fg:x="32464689800" fg:w="39575600"/><text x="40.8726%" y="79.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (37,585,100 samples, 0.05%)</title><rect x="43.8021%" y="53" width="0.0470%" height="15" fill="rgb(231,145,46)" fg:x="35005666600" fg:w="37585100"/><text x="44.0521%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (35,664,900 samples, 0.04%)</title><rect x="43.8045%" y="37" width="0.0446%" height="15" fill="rgb(251,118,11)" fg:x="35007586800" fg:w="35664900"/><text x="44.0545%" y="47.50"></text></g><g><title> AutoHotKey::image_processing::screenshot:src\image_processing.rs:16 (8,508,500 samples, 0.01%)</title><rect x="43.8500%" y="37" width="0.0106%" height="15" fill="rgb(217,147,25)" fg:x="35043896800" fg:w="8508500"/><text x="44.1000%" y="47.50"></text></g><g><title>ThreadId(23) (2,549,310,700 samples, 3.19%)</title><rect x="40.6722%" y="85" width="3.1899%" height="15" fill="rgb(247,81,37)" fg:x="32504265400" fg:w="2549310700"/><text x="40.9222%" y="95.50">Thr..</text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (47,935,100 samples, 0.06%)</title><rect x="43.8021%" y="69" width="0.0600%" height="15" fill="rgb(209,12,38)" fg:x="35005641000" fg:w="47935100"/><text x="44.0521%" y="79.50"></text></g><g><title> AutoHotKey::image_processing::update_screenshot:src\image_processing.rs:291 (10,324,400 samples, 0.01%)</title><rect x="43.8492%" y="53" width="0.0129%" height="15" fill="rgb(227,1,9)" fg:x="35043251700" fg:w="10324400"/><text x="44.0992%" y="63.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (33,483,200 samples, 0.04%)</title><rect x="47.2209%" y="53" width="0.0419%" height="15" fill="rgb(248,47,43)" fg:x="37737848200" fg:w="33483200"/><text x="47.4709%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (31,000,900 samples, 0.04%)</title><rect x="47.2240%" y="37" width="0.0388%" height="15" fill="rgb(221,10,30)" fg:x="37740330500" fg:w="31000900"/><text x="47.4740%" y="47.50"></text></g><g><title>ThreadId(24) (2,722,694,700 samples, 3.41%)</title><rect x="43.8621%" y="85" width="3.4069%" height="15" fill="rgb(210,229,1)" fg:x="35053576100" fg:w="2722694700"/><text x="44.1121%" y="95.50">Thr..</text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (38,453,000 samples, 0.05%)</title><rect x="47.2208%" y="69" width="0.0481%" height="15" fill="rgb(222,148,37)" fg:x="37737817800" fg:w="38453000"/><text x="47.4708%" y="79.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (30,509,400 samples, 0.04%)</title><rect x="50.8590%" y="53" width="0.0382%" height="15" fill="rgb(234,67,33)" fg:x="40645375000" fg:w="30509400"/><text x="51.1090%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (26,183,900 samples, 0.03%)</title><rect x="50.8644%" y="37" width="0.0328%" height="15" fill="rgb(247,98,35)" fg:x="40649700500" fg:w="26183900"/><text x="51.1144%" y="47.50"></text></g><g><title>ThreadId(25) (2,902,786,400 samples, 3.63%)</title><rect x="47.2690%" y="85" width="3.6322%" height="15" fill="rgb(247,138,52)" fg:x="37776270800" fg:w="2902786400"/><text x="47.5190%" y="95.50">Thre..</text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (33,716,400 samples, 0.04%)</title><rect x="50.8590%" y="69" width="0.0422%" height="15" fill="rgb(213,79,30)" fg:x="40645340800" fg:w="33716400"/><text x="51.1090%" y="79.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (24,598,800 samples, 0.03%)</title><rect x="54.7267%" y="53" width="0.0308%" height="15" fill="rgb(246,177,23)" fg:x="43736346600" fg:w="24598800"/><text x="54.9767%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (22,912,000 samples, 0.03%)</title><rect x="54.7288%" y="37" width="0.0287%" height="15" fill="rgb(230,62,27)" fg:x="43738033400" fg:w="22912000"/><text x="54.9788%" y="47.50"></text></g><g><title>ThreadId(26) (3,085,230,200 samples, 3.86%)</title><rect x="50.9012%" y="85" width="3.8605%" height="15" fill="rgb(216,154,8)" fg:x="40679057200" fg:w="3085230200"/><text x="51.1512%" y="95.50">Thre..</text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (27,974,800 samples, 0.04%)</title><rect x="54.7267%" y="69" width="0.0350%" height="15" fill="rgb(244,35,45)" fg:x="43736312600" fg:w="27974800"/><text x="54.9767%" y="79.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (30,479,100 samples, 0.04%)</title><rect x="58.8136%" y="53" width="0.0381%" height="15" fill="rgb(251,115,12)" fg:x="47002488500" fg:w="30479100"/><text x="59.0636%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (28,991,600 samples, 0.04%)</title><rect x="58.8155%" y="37" width="0.0363%" height="15" fill="rgb(240,54,50)" fg:x="47003976000" fg:w="28991600"/><text x="59.0655%" y="47.50"></text></g><g><title>ThreadId(27) (3,271,578,200 samples, 4.09%)</title><rect x="54.7617%" y="85" width="4.0937%" height="15" fill="rgb(233,84,52)" fg:x="43764287400" fg:w="3271578200"/><text x="55.0117%" y="95.50">Thre..</text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (33,407,200 samples, 0.04%)</title><rect x="58.8136%" y="69" width="0.0418%" height="15" fill="rgb(207,117,47)" fg:x="47002458400" fg:w="33407200"/><text x="59.0636%" y="79.50"></text></g><g><title> AutoHotKey::get_next_keybind_from_screen:src/main.rs:128 (30,310,900 samples, 0.04%)</title><rect x="63.1704%" y="53" width="0.0379%" height="15" fill="rgb(249,43,39)" fg:x="50484332100" fg:w="30310900"/><text x="63.4204%" y="63.50"></text></g><g><title> AutoHotKey::find_keybinds_parallel:src/main.rs:106 (28,445,600 samples, 0.04%)</title><rect x="63.1727%" y="37" width="0.0356%" height="15" fill="rgb(209,38,44)" fg:x="50486197400" fg:w="28445600"/><text x="63.4227%" y="47.50"></text></g><g><title>ThreadId(28) (3,483,142,100 samples, 4.36%)</title><rect x="58.8554%" y="85" width="4.3584%" height="15" fill="rgb(236,212,23)" fg:x="47035865600" fg:w="3483142100"/><text x="59.1054%" y="95.50">Threa..</text></g><g><title> AutoHotKey::execute_search_process:src/main.rs:181 (34,716,700 samples, 0.04%)</title><rect x="63.1703%" y="69" width="0.0434%" height="15" fill="rgb(242,79,21)" fg:x="50484291000" fg:w="34716700"/><text x="63.4203%" y="79.50"></text></g><g><title>ThreadId(29) (3,655,556,500 samples, 4.57%)</title><rect x="63.2138%" y="85" width="4.5741%" height="15" fill="rgb(211,96,35)" fg:x="50519007700" fg:w="3655556500"/><text x="63.4638%" y="95.50">Threa..</text></g><g><title>ThreadId(3) (3,678,293,000 samples, 4.60%)</title><rect x="67.7879%" y="85" width="4.6026%" height="15" fill="rgb(253,215,40)" fg:x="54174564200" fg:w="3678293000"/><text x="68.0379%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (68,469,100 samples, 0.09%)</title><rect x="72.3048%" y="69" width="0.0857%" height="15" fill="rgb(211,81,21)" fg:x="57784388100" fg:w="68469100"/><text x="72.5548%" y="79.50"></text></g><g><title>ThreadId(4) (3,678,022,100 samples, 4.60%)</title><rect x="72.3905%" y="85" width="4.6023%" height="15" fill="rgb(208,190,38)" fg:x="57852857200" fg:w="3678022100"/><text x="72.6405%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (63,687,700 samples, 0.08%)</title><rect x="76.9131%" y="69" width="0.0797%" height="15" fill="rgb(235,213,38)" fg:x="61467191600" fg:w="63687700"/><text x="77.1631%" y="79.50"></text></g><g><title>ThreadId(5) (3,675,409,000 samples, 4.60%)</title><rect x="76.9928%" y="85" width="4.5990%" height="15" fill="rgb(237,122,38)" fg:x="61530879300" fg:w="3675409000"/><text x="77.2428%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (63,285,500 samples, 0.08%)</title><rect x="81.5126%" y="69" width="0.0792%" height="15" fill="rgb(244,218,35)" fg:x="65143002800" fg:w="63285500"/><text x="81.7626%" y="79.50"></text></g><g><title>ThreadId(6) (3,678,657,200 samples, 4.60%)</title><rect x="81.5918%" y="85" width="4.6031%" height="15" fill="rgb(240,68,47)" fg:x="65206288300" fg:w="3678657200"/><text x="81.8418%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (59,308,100 samples, 0.07%)</title><rect x="86.1206%" y="69" width="0.0742%" height="15" fill="rgb(210,16,53)" fg:x="68825637400" fg:w="59308100"/><text x="86.3706%" y="79.50"></text></g><g><title>ThreadId(7) (3,676,968,400 samples, 4.60%)</title><rect x="86.1948%" y="85" width="4.6009%" height="15" fill="rgb(235,124,12)" fg:x="68884945500" fg:w="3676968400"/><text x="86.4448%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (67,491,300 samples, 0.08%)</title><rect x="90.7113%" y="69" width="0.0845%" height="15" fill="rgb(224,169,11)" fg:x="72494422600" fg:w="67491300"/><text x="90.9613%" y="79.50"></text></g><g><title>ThreadId(8) (3,677,102,400 samples, 4.60%)</title><rect x="90.7958%" y="85" width="4.6011%" height="15" fill="rgb(250,166,2)" fg:x="72561913900" fg:w="3677102400"/><text x="91.0458%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (69,875,200 samples, 0.09%)</title><rect x="95.3094%" y="69" width="0.0874%" height="15" fill="rgb(242,216,29)" fg:x="76169141100" fg:w="69875200"/><text x="95.5594%" y="79.50"></text></g><g><title>all (79,917,722,500 samples, 100%)</title><rect x="0.0000%" y="101" width="100.0000%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="79917722500"/><text x="0.2500%" y="111.50"></text></g><g><title>ThreadId(9) (3,678,706,200 samples, 4.60%)</title><rect x="95.3969%" y="85" width="4.6031%" height="15" fill="rgb(228,99,48)" fg:x="76239016300" fg:w="3678706200"/><text x="95.6469%" y="95.50">Threa..</text></g><g><title> AutoHotKey::image_processing::locate_on_screen:src\image_processing.rs:67 (63,199,200 samples, 0.08%)</title><rect x="99.9209%" y="69" width="0.0791%" height="15" fill="rgb(253,11,6)" fg:x="79854523300" fg:w="63199200"/><text x="100.1709%" y="79.50"></text></g></svg></svg>